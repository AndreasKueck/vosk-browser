diff --git a/src/Makefile b/src/Makefile
index c50810297..4eb626551 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -31,7 +31,7 @@ include kaldi.mk
 
 # Reset the default goal, so that the all target will become default
 .DEFAULT_GOAL :=
-all: $(SUBDIRS) matrix/test
+all: $(SUBDIRS) #matrix/test
 	-echo Done
 
 mklibdir:
diff --git a/src/bin/phones-to-prons.cc b/src/bin/phones-to-prons.cc
index 22d4d9205..0d7ab12c2 100644
--- a/src/bin/phones-to-prons.cc
+++ b/src/bin/phones-to-prons.cc
@@ -172,7 +172,7 @@ int main(int argc, char *argv[]) {
         if (g_kaldi_verbose_level >= 2) {
           KALDI_LOG << "phn2word FST is below:";
           fst::FstPrinter<StdArc> fstprinter(phn2word, NULL, NULL, NULL, false, true, "\t");
-          fstprinter.Print(std::cerr, "standard error");
+          fstprinter.Print(&std::cerr, "standard error");
           KALDI_LOG << "phone sequence is: ";
           for (size_t i = 0; i < phones.size(); i++)
             std::cerr << phones[i] << ' ';
diff --git a/src/chain/chain-supervision.cc b/src/chain/chain-supervision.cc
index b29000a44..f8a2c1d11 100644
--- a/src/chain/chain-supervision.cc
+++ b/src/chain/chain-supervision.cc
@@ -571,8 +571,9 @@ void Supervision::Write(std::ostream &os, bool binary) const {
       // Write using StdAcceptorCompactFst, making use of the fact that it's an
       // acceptor.
       fst::FstWriteOptions write_options("<unknown>");
-      fst::StdCompactAcceptorFst cfst(fst);
-      cfst.Write(os, write_options);
+      fst::StdCompactAcceptorFst::WriteFst(
+          fst, fst::AcceptorCompactor<fst::StdArc>(), os,
+          write_options);
     }
   } else {
     KALDI_ASSERT(e2e_fsts.size() == num_sequences);
@@ -585,8 +586,9 @@ void Supervision::Write(std::ostream &os, bool binary) const {
         // Write using StdAcceptorCompactFst, making use of the fact that it's an
         // acceptor.
         fst::FstWriteOptions write_options("<unknown>");
-        fst::StdCompactAcceptorFst cfst(e2e_fsts[i]);
-        cfst.Write(os, write_options);
+        fst::StdCompactAcceptorFst::WriteFst(
+            e2e_fsts[i], fst::AcceptorCompactor<fst::StdArc>(), os,
+            write_options);
       }
     }
     WriteToken(os, binary, "</Fsts>");
diff --git a/src/configure b/src/configure
index 3d05fca15..f2d7a21f5 100755
--- a/src/configure
+++ b/src/configure
@@ -86,6 +86,7 @@ Configuration options:
   --atlas-root=DIR      ATLAS root directory [default=../tools/ATLAS/]
   --openblas-root=DIR   OpenBLAS root directory
   --clapack-root=DIR    CLAPACK root directory
+  --gsl-root=DIR        GSL root directory
   --mkl-root=DIR        MKL root directory
   --mkl-libdir=DIR      MKL library directory
   --omp-libdir=DIR      OpenMP directory
@@ -691,6 +692,9 @@ do
   --clapack-root=*)
     GetSwitchExistingPathOrDie CLAPACKROOT "$1"
     shift ;;
+  --gsl-root=*)
+    GetSwitchExistingPathOrDie GSLROOT "$1"
+    shift ;;
   --openblas-root=*)
     GetSwitchExistingPathOrDie OPENBLASROOT "$1"
     shift ;;
@@ -958,6 +962,47 @@ if $android ; then
   cat makefiles/android_openblas.mk >> kaldi.mk
 
   echo "Successfully configured for Android with OpenBLAS from $OPENBLASROOT."
+elif [ "$(basename $CC)" == "emcc" ]; then
+  # emscripten (WebAssembly)
+
+  if [ -z "$CLAPACKROOT" ]; then
+    failure "Must specify the location of CLAPACK with --clapack-root option (and it must exist)"
+  fi
+  if [ ! -f ../tools/CLAPACK/clapack.h ]; then
+    failure "could not find file ../tools/CLAPACK/clapack.h"
+  fi
+  if [ ! -d "$CLAPACKROOT" ]; then
+    failure "The directory $CLAPACKROOT does not exist"
+  fi
+
+  if [ -z "$GSLROOT" ]; then
+    failure "Must specify the location of GSL with --gsl-root option (and it must exist)"
+  fi
+  if [ ! -d "$GSLROOT" ]; then
+    failure "The directory $GSLROOT does not exist"
+  fi
+
+  for lib in F2CLIBS/libf2c.bc lapack_WA.bc libcblaswr.bc; do
+    CLAPACKLIBS="$CLAPACKLIBS $CLAPACKROOT/$lib"
+  done
+  if [ "`uname`" == "Darwin"  ]; then
+    CLAPACKLIBS="$CLAPACKLIBS $GSLROOT/cblas/.libs/libgslcblas.dylib"
+  elif [ "`uname`" == "Linux" ]; then
+    CLAPACKLIBS="$CLAPACKLIBS $GSLROOT/cblas/.libs/libgslcblas.so"
+  else
+    failure "Emscripten is not supported on this platform."
+  fi
+
+  echo "CLAPACKLIBS = $CLAPACKLIBS" >> kaldi.mk
+
+  # Also check for cblas.h and f2c.h
+  echo "Using CLAPACK libs from $CLAPACKROOT as the linear algebra library."
+  if [ ! -f makefiles/wasm_clapack.mk ]; then
+    failure "makefiles/wasm_clapack.mk not found."
+  fi
+  cat makefiles/wasm_clapack.mk >> kaldi.mk
+  echo "Warning (CLAPACK): this part of the configure process is not properly tested and may not work."
+  echo "Successfully configured for WebAssembly with CLAPACK libs from $CLAPACKROOT"
 
 elif [ "`uname`" == "Darwin" ]; then
   # Check for Darwin first, because we later call uname -o (for Cygwin)
diff --git a/src/decoder/lattice-biglm-faster-decoder.h b/src/decoder/lattice-biglm-faster-decoder.h
index 87841799f..9f50739a0 100644
--- a/src/decoder/lattice-biglm-faster-decoder.h
+++ b/src/decoder/lattice-biglm-faster-decoder.h
@@ -123,7 +123,7 @@ class LatticeBiglmFasterDecoder {
     if (!GetRawLattice(&fst, use_final_probs)) return false;
     // std::cout << "Raw lattice is:\n";
     // fst::FstPrinter<LatticeArc> fstprinter(fst, NULL, NULL, NULL, false, true);
-    // fstprinter.Print(std::cout, "standard output");
+    // fstprinter.Print(&std::cout, "standard output");
     ShortestPath(fst, ofst);
     return true;
   }
diff --git a/src/fstext/context-fst-test.cc b/src/fstext/context-fst-test.cc
index 16009714c..65da1bb07 100644
--- a/src/fstext/context-fst-test.cc
+++ b/src/fstext/context-fst-test.cc
@@ -196,7 +196,7 @@ static void TestContextFst(bool verbose, bool use_matcher) {
       std::cout << "Sequence FST is:\n";
       {  // Try to print the fst.
         FstPrinter<Arc> fstprinter(*f, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
     }
 
@@ -224,7 +224,7 @@ static void TestContextFst(bool verbose, bool use_matcher) {
       std::cout << "Composed FST is:\n";
       {  // Try to print the fst.
         FstPrinter<Arc> fstprinter(fst_composed, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
     }
 
diff --git a/src/fstext/determinize-lattice-test.cc b/src/fstext/determinize-lattice-test.cc
index 5e4f18129..886aa4cc1 100644
--- a/src/fstext/determinize-lattice-test.cc
+++ b/src/fstext/determinize-lattice-test.cc
@@ -94,7 +94,7 @@ template<class Arc> void TestDeterminizeLattice() {
     std::cout << "FST before lattice-determinizing is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     VectorFst<Arc> det_fst;
     try {
@@ -106,7 +106,7 @@ template<class Arc> void TestDeterminizeLattice() {
       std::cout << "FST after lattice-determinizing is:\n";
       {
         FstPrinter<Arc> fstprinter(det_fst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
       assert(det_fst.Properties(kIDeterministic, true) & kIDeterministic);
       // OK, now determinize it a different way and check equivalence.
@@ -117,7 +117,7 @@ template<class Arc> void TestDeterminizeLattice() {
       std::cout << "Compact FST is:\n";
       {
         FstPrinter<CompactArc> fstprinter(compact_fst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
       if (kaldi::Rand() % 2 == 1)
         ConvertLattice<Weight, Int>(det_fst, &compact_det_fst, false);
@@ -128,7 +128,7 @@ template<class Arc> void TestDeterminizeLattice() {
       std::cout << "Compact version of determinized FST is:\n";
       {
         FstPrinter<CompactArc> fstprinter(compact_det_fst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
 
       assert(RandEquivalent(compact_det_fst, compact_fst, 5/*paths*/, 0.01/*delta*/, kaldi::Rand()/*seed*/, 100/*path length, max*/));
@@ -149,14 +149,14 @@ template<class Arc> void TestDeterminizeLattice2() {
     std::cout << "FST before lattice-determinizing is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     VectorFst<Arc> ofst;
     DeterminizeLattice<TropicalWeight, int32>(*fst, &ofst);
     std::cout << "FST after lattice-determinizing is:\n";
     {
       FstPrinter<Arc> fstprinter(ofst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     delete fst;
   }
diff --git a/src/fstext/determinize-star-test.cc b/src/fstext/determinize-star-test.cc
index 272774b20..814e6a38d 100644
--- a/src/fstext/determinize-star-test.cc
+++ b/src/fstext/determinize-star-test.cc
@@ -38,7 +38,7 @@ template<class Arc> void TestDeterminizeGeneral() {
     std::cout << "FST before determinizing is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     VectorFst<Arc> ofst;
     try {
@@ -46,7 +46,7 @@ template<class Arc> void TestDeterminizeGeneral() {
       std::cout << "FST after determinizing is:\n";
       {
         FstPrinter<Arc> fstprinter(ofst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
       assert(RandEquivalent(*fst, ofst, 5/*paths*/, 0.01/*delta*/, kaldi::Rand()/*seed*/, 100/*path length, max*/));
     } catch (...) {
@@ -101,7 +101,7 @@ template<class Arc>  void TestDeterminize() {
   std::cout <<" printing before trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   // Trim resulting FST.
   Connect(fst);
@@ -109,7 +109,7 @@ template<class Arc>  void TestDeterminize() {
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<Arc> *fst_copy_orig = new VectorFst<Arc>(*fst);
@@ -122,7 +122,7 @@ template<class Arc>  void TestDeterminize() {
   std::cout <<" printing after predeterminization\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -138,7 +138,7 @@ template<class Arc>  void TestDeterminize() {
   std::cout <<" printing after epsilon removal\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   VectorFst<Arc> ofst_orig;
   VectorFst<Arc> ofst_star;
@@ -157,14 +157,14 @@ template<class Arc>  void TestDeterminize() {
   {
     std::cout <<" printing after determinization [baseline]\n";
     FstPrinter<Arc> fstprinter(ofst_orig, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
     assert(ofst_orig.Properties(kIDeterministic, true) == kIDeterministic);
   }
 
   {
     std::cout <<" printing after determinization [star]\n";
     FstPrinter<Arc> fstprinter(ofst_star, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
     assert(ofst_star.Properties(kIDeterministic, true) == kIDeterministic);
   }
 
@@ -174,7 +174,7 @@ template<class Arc>  void TestDeterminize() {
   std::cout <<" printing after removing "<<num_removed<<" instances of extra symbols\n";
   {
     FstPrinter<Arc> fstprinter(ofst_star, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   std::cout <<" Checking equivalent to original FST.\n";
@@ -242,7 +242,7 @@ template<class Arc>  void TestPush() {
   std::cout <<" printing before trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   // Trim resulting FST.
   Connect(fst);
@@ -250,7 +250,7 @@ template<class Arc>  void TestPush() {
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<Arc> *fst_copy_orig = new VectorFst<Arc>(*fst);
@@ -267,7 +267,7 @@ template<class Arc>  void TestPush() {
   std::cout <<" printing after pushing\n";
   {
     FstPrinter<Arc> fstprinter(fst_pushed, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   assert(RandEquivalent(*fst, fst_pushed, 5/*paths*/, 0.01/*delta*/, kaldi::Rand()/*seed*/, 100/*path length-- max?*/));
@@ -320,7 +320,7 @@ template<class Arc>  void TestMinimize() {
   std::cout <<" printing before trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   // Trim resulting FST.
   Connect(fst);
@@ -328,7 +328,7 @@ template<class Arc>  void TestMinimize() {
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<Arc> *fst_copy_orig = new VectorFst<Arc>(*fst);
@@ -341,7 +341,7 @@ template<class Arc>  void TestMinimize() {
   std::cout <<" printing after predeterminization\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -357,7 +357,7 @@ template<class Arc>  void TestMinimize() {
   std::cout <<" printing after epsilon removal\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   VectorFst<Arc> ofst_orig;
   VectorFst<Arc> ofst_star;
@@ -370,7 +370,7 @@ template<class Arc>  void TestMinimize() {
   {
     std::cout <<" printing after determinization [baseline]\n";
     FstPrinter<Arc> fstprinter(ofst_orig, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -382,7 +382,7 @@ template<class Arc>  void TestMinimize() {
     {
       std::cout <<" printing after determinization by DeterminizeStar [in gallic]\n";
       FstPrinter<GallicArc< Arc> > fstprinter(gallic_fst, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
 
@@ -392,7 +392,7 @@ template<class Arc>  void TestMinimize() {
     {
       std::cout <<" printing after pushing weights [in gallic]\n";
       FstPrinter<GallicArc< Arc> > fstprinter(gallic_fst, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
 
@@ -401,7 +401,7 @@ template<class Arc>  void TestMinimize() {
     {
       std::cout <<" printing after  minimization [in gallic]\n";
       FstPrinter<GallicArc< Arc> > fstprinter(gallic_fst, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
     printf("Converting gallic back to regular [my approach]\n");
@@ -410,7 +410,7 @@ template<class Arc>  void TestMinimize() {
     {
       std::cout <<" printing factor-weight FST\n";
       FstPrinter<GallicArc< Arc> > fstprinter(fwfst, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
     Map(fwfst, &ofst_star, FromGallicMapper<Arc, GALLIC_LEFT>());
@@ -418,7 +418,7 @@ template<class Arc>  void TestMinimize() {
     {
       std::cout <<" printing after converting back to regular FST\n";
       FstPrinter<Arc> fstprinter(ofst_star, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
   }
@@ -431,7 +431,7 @@ template<class Arc>  void TestMinimize() {
   std::cout <<" printing after removing "<<num_removed<<" instances of extra symbols\n";
   {
     FstPrinter<Arc> fstprinter(ofst_star, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   std::cout <<" Checking equivalent to original FST.\n";
diff --git a/src/fstext/factor-test.cc b/src/fstext/factor-test.cc
index 9f13b8b96..687d0ad59 100644
--- a/src/fstext/factor-test.cc
+++ b/src/fstext/factor-test.cc
@@ -79,7 +79,7 @@ template<class Arc> static void TestFactor() {
   std::cout <<" printing before trimming\n";
   {
     FstPrinter<Arc> fstprinter(fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   // Trim resulting FST.
   Connect(&fst);
@@ -87,7 +87,7 @@ template<class Arc> static void TestFactor() {
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   if (fst.Start() == kNoStateId) return;  // "Connect" made it empty.
diff --git a/src/fstext/fstext-utils-inl.h b/src/fstext/fstext-utils-inl.h
index 681a1290e..8f1a67b5f 100644
--- a/src/fstext/fstext-utils-inl.h
+++ b/src/fstext/fstext-utils-inl.h
@@ -374,12 +374,12 @@ void GetSymbols(const SymbolTable &symtab,
                 std::vector<I> *syms_out) {
   KALDI_ASSERT(syms_out != NULL);
   syms_out->clear();
-  for (SymbolTable::iterator iter = symtab.begin();
-      iter != symtab.end();
-      ++iter) {
-    if (include_eps || iter->Label() != 0) {
-      syms_out->push_back(iter->Label());
-      KALDI_ASSERT(syms_out->back() == iter->Label());  // an integer-range thing.
+  for (SymbolTableIterator iter(symtab);
+      !iter.Done();
+      iter.Next()) {
+    if (include_eps || iter.Value() != 0) {
+      syms_out->push_back(iter.Value());
+      KALDI_ASSERT(syms_out->back() == iter.Value());  // an integer-range thing.
     }
   }
 }
diff --git a/src/fstext/fstext-utils-test.cc b/src/fstext/fstext-utils-test.cc
index 38ecc35da..4ce296f09 100644
--- a/src/fstext/fstext-utils-test.cc
+++ b/src/fstext/fstext-utils-test.cc
@@ -140,7 +140,7 @@ template<class Arc>  void TestSafeDeterminizeWrapper() {  // also tests SafeDete
   std::cout <<" printing before trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   // Trim resulting FST.
   Connect(fst);
@@ -148,7 +148,7 @@ template<class Arc>  void TestSafeDeterminizeWrapper() {  // also tests SafeDete
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<Arc> *fst_copy_orig = new VectorFst<Arc>(*fst);
@@ -362,7 +362,7 @@ void TestEqualAlign() {
 template<class Arc> void Print(const Fst<Arc> &fst, std::string message) {
   std::cout << message << "\n";
   FstPrinter<Arc> fstprinter(fst, NULL, NULL, NULL, false, true, "\t");
-  fstprinter.Print(std::cout, "standard output");
+  fstprinter.Print(&std::cout, "standard output");
 }
 
 
diff --git a/src/fstext/kaldi-fst-io-inl.h b/src/fstext/kaldi-fst-io-inl.h
index f7bb3a7c2..b6bae4b9d 100644
--- a/src/fstext/kaldi-fst-io-inl.h
+++ b/src/fstext/kaldi-fst-io-inl.h
@@ -44,7 +44,7 @@ void WriteFstKaldi(std::ostream &os, bool binary,
     bool acceptor = false, write_one = false;
     FstPrinter<Arc> printer(t, t.InputSymbols(), t.OutputSymbols(),
                             NULL, acceptor, write_one, "\t");
-    printer.Print(os, "<unknown>");
+    printer.Print(&os, "<unknown>");
     if (os.fail())
       KALDI_ERR << "Stream failure detected writing FST to stream";
     // Write another newline as a terminating character.  The read routine will
diff --git a/src/fstext/lattice-utils-test.cc b/src/fstext/lattice-utils-test.cc
index 13b4123db..aa931d47d 100644
--- a/src/fstext/lattice-utils-test.cc
+++ b/src/fstext/lattice-utils-test.cc
@@ -31,7 +31,7 @@ template<class Weight, class Int> void TestConvert(bool invert) {
     std::cout << "FST before converting to compact-arc is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     VectorFst<CompactArc> ofst;
     ConvertLattice<Weight, Int>(*fst, &ofst, invert);
@@ -39,14 +39,14 @@ template<class Weight, class Int> void TestConvert(bool invert) {
     std::cout << "FST after converting is:\n";
     {
       FstPrinter<CompactArc> fstprinter(ofst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     VectorFst<Arc> origfst;
     ConvertLattice<Weight, Int>(ofst, &origfst, invert);
     std::cout << "FST after back conversion is:\n";
     {
       FstPrinter<Arc> fstprinter(origfst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
     assert(RandEquivalent(*fst, origfst, 5/*paths*/, 0.01/*delta*/, kaldi::Rand()/*seed*/, 100/*path length-- max?*/));
@@ -67,7 +67,7 @@ template<class Weight, class Int> void TestShortestPath() {
       std::cout << "FST before converting to compact-arc is:\n";
       {
         FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
       VectorFst<CompactArc> cfst;
       ConvertLattice<Weight, Int>(*fst, &cfst, false); // invert == false
@@ -99,10 +99,9 @@ template<class Weight, class Int> void TestShortestPath() {
 
         assert(ApproxEqual(ShortestDistance(nbest_fst_1),
                            ShortestDistance(nbest_fst_1b)));
-        // since semiring is idempotent, this should succeed too
-        // in theory, but not in practice
-        // assert(ApproxEqual(ShortestDistance(cfst),
-        //                   ShortestDistance(nbest_fst_1b)));
+        // since semiring is idempotent, this should succeed too.
+        assert(ApproxEqual(ShortestDistance(cfst),
+                           ShortestDistance(nbest_fst_1b)));
       }
 
       delete fst;
@@ -206,7 +205,7 @@ template<class Weight, class Int> void TestConvertPair(bool invert) {
     /*std::cout << "FST before converting to compact-arc is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true);
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
       }*/
     VectorFst<CompactArc> ofst;
     ConvertLattice<Weight, Int>(*fst, &ofst, invert);
@@ -214,14 +213,14 @@ template<class Weight, class Int> void TestConvertPair(bool invert) {
     /*std::cout << "FST after converting is:\n";
     {
       FstPrinter<CompactArc> fstprinter(ofst, NULL, NULL, NULL, false, true);
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
       }*/
     VectorFst<Arc> origfst;
     ConvertLattice<Weight, Int>(ofst, &origfst, invert);
     /*std::cout << "FST after back conversion is:\n";
     {
       FstPrinter<Arc> fstprinter(origfst, NULL, NULL, NULL, false, true);
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
       }*/
 
     assert(RandEquivalent(*fst, origfst, 5/*paths*/, 0.01/*delta*/, kaldi::Rand()/*seed*/, 100/*path length-- max?*/));
@@ -261,7 +260,7 @@ template<class Weight, class Int> void TestScalePair(bool invert) {
     /*std::cout << "FST before converting to compact-arc is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true);
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
       }*/
     VectorFst<CompactArc> ofst;
     ConvertLattice<Weight, Int>(*fst, &ofst, invert);
@@ -269,7 +268,7 @@ template<class Weight, class Int> void TestScalePair(bool invert) {
     /*std::cout << "FST after converting and scaling is:\n";
     {
       FstPrinter<CompactArc> fstprinter(ofst, NULL, NULL, NULL, false, true);
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
       }*/
     VectorFst<Arc> origfst;
     ConvertLattice<Weight, Int>(ofst, &origfst, invert);
@@ -277,7 +276,7 @@ template<class Weight, class Int> void TestScalePair(bool invert) {
     /*std::cout << "FST after back conversion and scaling is:\n";
     {
       FstPrinter<Arc> fstprinter(origfst, NULL, NULL, NULL, false, true);
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
       }*/
     // If RandEquivalent doesn't work, it could be due to a nasty issue related to the use
     // of exact floating-point comparisons in the Plus function of LatticeWeight.
diff --git a/src/fstext/pre-determinize-inl.h b/src/fstext/pre-determinize-inl.h
index 9ac32279a..d51948f18 100644
--- a/src/fstext/pre-determinize-inl.h
+++ b/src/fstext/pre-determinize-inl.h
@@ -235,9 +235,9 @@ inline bool HasBannedPrefixPlusDigits(SymbolTable *symTable, std::string prefix,
   assert(symTable != NULL);
   const char *prefix_ptr = prefix.c_str();
   size_t prefix_len = strlen(prefix_ptr);  // allowed to be zero but not encouraged.
-  for (SymbolTable::iterator siter = symTable->begin(); siter != symTable->end(); ++siter) {
-    const char *sym = siter->Symbol().c_str();
-    if (!strncmp(prefix_ptr, sym, prefix_len)) {  // has prefix.
+  for (SymbolTableIterator siter(*symTable); !siter.Done(); siter.Next()) {
+    const std::string &sym = siter.Symbol();
+    if (!strncmp(prefix_ptr, sym.c_str(), prefix_len)) {  // has prefix.
       if (isdigit(sym[prefix_len])) {  // we don't allow prefix followed by a digit, as a symbol.
         // Has at least one digit.
         size_t pos;
diff --git a/src/fstext/pre-determinize-test.cc b/src/fstext/pre-determinize-test.cc
index 95ebd62f0..7210e4554 100644
--- a/src/fstext/pre-determinize-test.cc
+++ b/src/fstext/pre-determinize-test.cc
@@ -73,7 +73,7 @@ template<class Arc>  void TestPreDeterminize() {
   std::cout <<" printing before trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   // Trim resulting FST.
   Connect(fst);
@@ -81,7 +81,7 @@ template<class Arc>  void TestPreDeterminize() {
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<Arc> *fst_copy_orig = new VectorFst<Arc>(*fst);
@@ -95,7 +95,7 @@ template<class Arc>  void TestPreDeterminize() {
   std::cout <<" printing after predeterminization\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -111,7 +111,7 @@ template<class Arc>  void TestPreDeterminize() {
   std::cout <<" printing after epsilon removal\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -121,14 +121,14 @@ template<class Arc>  void TestPreDeterminize() {
   std::cout <<" printing after determinization\n";
   {
     FstPrinter<Arc> fstprinter(ofst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   int64 num_removed = DeleteISymbols(&ofst, extra_syms);
   std::cout <<" printing after removing "<<num_removed<<" instances of extra symbols\n";
   {
     FstPrinter<Arc> fstprinter(ofst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   std::cout <<" Checking equivalent to original FST.\n";
@@ -180,7 +180,7 @@ template<class Arc>  void TestAddSelfLoops() {
   std::cout <<" printing before adding self-loops\n";
   {
     FstPrinter<Arc> fstprinter(*fst, ilabels, olabels, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -199,7 +199,7 @@ template<class Arc>  void TestAddSelfLoops() {
   std::cout <<" printing after adding self-loops\n";
   {
     FstPrinter<Arc> fstprinter(*fst, ilabels, olabels, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   delete fst;
diff --git a/src/fstext/prune-special-test.cc b/src/fstext/prune-special-test.cc
index f27b54f45..5d8c40b6a 100644
--- a/src/fstext/prune-special-test.cc
+++ b/src/fstext/prune-special-test.cc
@@ -38,7 +38,7 @@ static void TestPruneSpecial() {
 
   {
     FstPrinter<Arc> fstprinter(*ifst, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
     std::cout << std::endl;
   }
 
@@ -47,7 +47,7 @@ static void TestPruneSpecial() {
   PruneSpecial<StdArc>(*ifst, &ofst1, beam);
   {
     FstPrinter<Arc> fstprinter(ofst1, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
     std::cout << std::endl;
   }
 
@@ -56,7 +56,7 @@ static void TestPruneSpecial() {
   Prune(*ifst, &ofst2, beam);
   {
     FstPrinter<Arc> fstprinter(ofst2, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
     std::cout << std::endl;
   }
 
diff --git a/src/fstext/push-special-test.cc b/src/fstext/push-special-test.cc
index 9cf16bb8a..557b43d30 100644
--- a/src/fstext/push-special-test.cc
+++ b/src/fstext/push-special-test.cc
@@ -38,7 +38,7 @@ static void TestPushSpecial() {
 
   {
     FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<Arc> fst_copy(*fst);
@@ -56,7 +56,7 @@ static void TestPushSpecial() {
 
   {
     FstPrinter<Arc> fstprinter(fst_copy, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   KALDI_LOG << "Min value is " << min.Value() << ", max value is " << max.Value();
 
diff --git a/src/fstext/remove-eps-local-test.cc b/src/fstext/remove-eps-local-test.cc
index 2e1d3d8cf..80cca875f 100644
--- a/src/fstext/remove-eps-local-test.cc
+++ b/src/fstext/remove-eps-local-test.cc
@@ -83,7 +83,7 @@ template<class Arc> static void TestRemoveEpsLocal() {
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<Arc> fst_copy1(fst);
@@ -96,7 +96,7 @@ template<class Arc> static void TestRemoveEpsLocal() {
   {
     std::cout << "copy1 = \n";
     FstPrinter<Arc> fstprinter(fst_copy1, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -141,7 +141,7 @@ static void TestRemoveEpsLocalSpecial() {
   {
     std::cout << "logfst = \n";
     FstPrinter<LogArc> fstprinter(*logfst, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   VectorFst<StdArc> fst;
@@ -156,7 +156,7 @@ static void TestRemoveEpsLocalSpecial() {
   {
     std::cout << "logfst2 = \n";
     FstPrinter<LogArc> fstprinter(logfst2, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   if (ApproxEqual(ShortestDistance(*logfst), ShortestDistance(logfst2))) {
     // make sure we preserved stochasticity in cases where doing so was
diff --git a/src/fstext/table-matcher-test.cc b/src/fstext/table-matcher-test.cc
index 0e8982720..2d39fe957 100644
--- a/src/fstext/table-matcher-test.cc
+++ b/src/fstext/table-matcher-test.cc
@@ -64,13 +64,13 @@ template<class Arc>  void TestTableMatcher(bool connect, bool left) {
   std::cout <<"Table-Composed FST\n";
   {
     FstPrinter<Arc> fstprinter(composed, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   std::cout <<" Baseline-Composed FST\n";
   {
     FstPrinter<Arc> fstprinter(composed_baseline, NULL, NULL, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   if ( !RandEquivalent(composed, composed_baseline, 3/*paths*/, 0.01/*delta*/, kaldi::Rand()/*seed*/, 20/*path length-- max?*/)) {
@@ -79,7 +79,7 @@ template<class Arc>  void TestTableMatcher(bool connect, bool left) {
     std::cout <<" Diff1 (composed - baseline) \n";
     {
       FstPrinter<Arc> fstprinter(diff1, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
 
@@ -88,7 +88,7 @@ template<class Arc>  void TestTableMatcher(bool connect, bool left) {
     std::cout <<" Diff2 (baseline - composed) \n";
     {
       FstPrinter<Arc> fstprinter(diff2, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
     assert(0);
@@ -149,7 +149,7 @@ template<class Arc>  void TestTableMatcherCacheLeft(bool connect) {
       std::cout <<" Diff1 (composed - baseline) \n";
       {
         FstPrinter<Arc> fstprinter(diff1, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
 
 
@@ -158,7 +158,7 @@ template<class Arc>  void TestTableMatcherCacheLeft(bool connect) {
       std::cout <<" Diff2 (baseline - composed) \n";
       {
         FstPrinter<Arc> fstprinter(diff2, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
 
       assert(0);
@@ -219,7 +219,7 @@ template<class Arc>  void TestTableMatcherCacheRight(bool connect) {
       std::cout <<" Diff1 (composed - baseline) \n";
       {
         FstPrinter<Arc> fstprinter(diff1, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
 
 
@@ -228,7 +228,7 @@ template<class Arc>  void TestTableMatcherCacheRight(bool connect) {
       std::cout <<" Diff2 (baseline - composed) \n";
       {
         FstPrinter<Arc> fstprinter(diff2, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
 
       assert(0);
diff --git a/src/fstext/trivial-factor-weight-test.cc b/src/fstext/trivial-factor-weight-test.cc
index 3045a6693..b4682443d 100644
--- a/src/fstext/trivial-factor-weight-test.cc
+++ b/src/fstext/trivial-factor-weight-test.cc
@@ -73,7 +73,7 @@ template<class Arc>  void TestFactor() {
   std::cout <<" printing before trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   // Trim resulting FST.
   Connect(fst);
@@ -81,7 +81,7 @@ template<class Arc>  void TestFactor() {
   std::cout <<" printing after trimming\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
   vector<Label> extra_syms;
@@ -92,7 +92,7 @@ template<class Arc>  void TestFactor() {
   std::cout <<" printing after predeterminization\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
 
 
@@ -108,7 +108,7 @@ template<class Arc>  void TestFactor() {
   std::cout <<" printing after double-epsilon removal\n";
   {
     FstPrinter<Arc> fstprinter(*fst, sptr, sptr, NULL, false, true, "\t");
-    fstprinter.Print(std::cout, "standard output");
+    fstprinter.Print(&std::cout, "standard output");
   }
   VectorFst<Arc> ofst_star;
 
@@ -127,7 +127,7 @@ template<class Arc>  void TestFactor() {
     {
       std::cout <<" printing gallic FST\n";
       FstPrinter<GallicArc<Arc> >  fstprinter(gallic_fst, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
 
@@ -139,7 +139,7 @@ template<class Arc>  void TestFactor() {
     {
       std::cout <<" printing factor-weight FST\n";
       FstPrinter<GallicArc<Arc> >  fstprinter(fwfst, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
     Map(fwfst, &ofst_star, FromGallicMapper<Arc, GALLIC_LEFT>());
@@ -147,7 +147,7 @@ template<class Arc>  void TestFactor() {
     {
       std::cout <<" printing after converting back to regular FST\n";
       FstPrinter<Arc> fstprinter(ofst_star, sptr, sptr, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
 
 
diff --git a/src/ivector/ivector-extractor.cc b/src/ivector/ivector-extractor.cc
index c3a122281..1ad75599d 100644
--- a/src/ivector/ivector-extractor.cc
+++ b/src/ivector/ivector-extractor.cc
@@ -190,16 +190,10 @@ void IvectorExtractor::ComputeDerivedVars() {
   U_.Resize(NumGauss(), IvectorDim() * (IvectorDim() + 1) / 2);
   Sigma_inv_M_.resize(NumGauss());
 
-  // Note, we could have used RunMultiThreaded for this and similar tasks we
-  // have here, but we found that we don't get as complete CPU utilization as we
-  // could because some tasks finish before others.
-  {
-    TaskSequencerConfig sequencer_opts;
-    sequencer_opts.num_threads = g_num_threads;
-    TaskSequencer<IvectorExtractorComputeDerivedVarsClass> sequencer(
-        sequencer_opts);
-    for (int32 i = 0; i < NumGauss(); i++)
-      sequencer.Run(new IvectorExtractorComputeDerivedVarsClass(this, i));
+  for (int32 i = 0; i < NumGauss(); i++) {
+    IvectorExtractorComputeDerivedVarsClass *t = new IvectorExtractorComputeDerivedVarsClass(this, i);
+    (*t)();
+    delete t;
   }
   KALDI_LOG << "Done.";
 }
diff --git a/src/lat/determinize-lattice-pruned-test.cc b/src/lat/determinize-lattice-pruned-test.cc
index e7c7977e8..f6684f0b5 100644
--- a/src/lat/determinize-lattice-pruned-test.cc
+++ b/src/lat/determinize-lattice-pruned-test.cc
@@ -63,7 +63,7 @@ template<class Arc> void TestDeterminizeLatticePruned() {
     std::cout << "FST before lattice-determinizing is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     VectorFst<Arc> det_fst;
     try {
@@ -76,7 +76,7 @@ template<class Arc> void TestDeterminizeLatticePruned() {
       std::cout << "FST after lattice-determinizing is:\n";
       {
         FstPrinter<Arc> fstprinter(det_fst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
       KALDI_ASSERT(det_fst.Properties(kIDeterministic, true) & kIDeterministic);
       // OK, now determinize it a different way and check equivalence.
@@ -93,14 +93,14 @@ template<class Arc> void TestDeterminizeLatticePruned() {
       std::cout << "Compact pruned FST is:\n";
       {
         FstPrinter<CompactArc> fstprinter(compact_pruned_fst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
       ConvertLattice<Weight, Int>(det_fst, &compact_pruned_det_fst, false);
 
       std::cout << "Compact version of determinized FST is:\n";
       {
         FstPrinter<CompactArc> fstprinter(compact_pruned_det_fst, NULL, NULL, NULL, false, true, "\t");
-        fstprinter.Print(std::cout, "standard output");
+        fstprinter.Print(&std::cout, "standard output");
       }
 
       if (ans)
@@ -123,14 +123,14 @@ template<class Arc> void TestDeterminizeLatticePruned2() {
     std::cout << "FST before lattice-determinizing is:\n";
     {
       FstPrinter<Arc> fstprinter(*fst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     VectorFst<Arc> ofst;
     DeterminizeLatticePruned<Weight>(*fst, 10.0, &ofst);
     std::cout << "FST after lattice-determinizing is:\n";
     {
       FstPrinter<Arc> fstprinter(ofst, NULL, NULL, NULL, false, true, "\t");
-      fstprinter.Print(std::cout, "standard output");
+      fstprinter.Print(&std::cout, "standard output");
     }
     delete fst;
   }
diff --git a/src/lat/kaldi-lattice.cc b/src/lat/kaldi-lattice.cc
index 648e67115..744cc5384 100644
--- a/src/lat/kaldi-lattice.cc
+++ b/src/lat/kaldi-lattice.cc
@@ -78,7 +78,7 @@ bool WriteCompactLattice(std::ostream &os, bool binary,
     fst::FstPrinter<CompactLatticeArc> printer(t, t.InputSymbols(),
                                                t.OutputSymbols(),
                                                NULL, acceptor, write_one, "\t");
-    printer.Print(os, "<unknown>");
+    printer.Print(&os, "<unknown>");
     if (os.fail())
       KALDI_WARN << "Stream failure detected.";
     // Write another newline as a terminating character.  The read routine will
@@ -403,7 +403,7 @@ bool WriteLattice(std::ostream &os, bool binary, const Lattice &t) {
     fst::FstPrinter<LatticeArc> printer(t, t.InputSymbols(),
                                         t.OutputSymbols(),
                                         NULL, acceptor, write_one, "\t");
-    printer.Print(os, "<unknown>");
+    printer.Print(&os, "<unknown>");
     if (os.fail())
       KALDI_WARN << "Stream failure detected.";
     // Write another newline as a terminating character.  The read routine will
diff --git a/src/lat/push-lattice-test.cc b/src/lat/push-lattice-test.cc
index c2e231d91..c2643292f 100644
--- a/src/lat/push-lattice-test.cc
+++ b/src/lat/push-lattice-test.cc
@@ -92,12 +92,12 @@ void TestPushCompactLatticeWeights() {
       {
         fst::FstPrinter<CompactLatticeArc> printer(clat2, NULL, NULL,
                                                    NULL, true, true, "\t");
-        printer.Print(std::cerr, "<unknown>");
+        printer.Print(&std::cerr, "<unknown>");
       }
       {
         fst::FstPrinter<CompactLatticeArc> printer(*clat, NULL, NULL,
                                                    NULL, true, true, "\t");
-        printer.Print(std::cerr, "<unknown>");
+        printer.Print(&std::cerr, "<unknown>");
       }
       KALDI_ERR << "Bad lattice being pushed.";
     }
diff --git a/src/lm/arpa-lm-compiler-test.cc b/src/lm/arpa-lm-compiler-test.cc
index ec550c6ca..a84258eda 100644
--- a/src/lm/arpa-lm-compiler-test.cc
+++ b/src/lm/arpa-lm-compiler-test.cc
@@ -60,12 +60,12 @@ static fst::StdVectorFst* CreateGenFst(bool seps, const fst::SymbolTable* pst) {
   }
 
   // Add a loop for each symbol in the table except the four special ones.
-
-  for (fst::SymbolTable::iterator si = pst->begin(); si != pst->end(); ++si) {
-    if (si->Label() == kBos || si->Label() == kEos ||
-        si->Label() == kEps || si->Label() == kDisambig)
+  fst::SymbolTableIterator si(*pst);
+  for (si.Reset(); !si.Done(); si.Next()) {
+    if (si.Value() == kBos || si.Value() == kEos ||
+        si.Value() == kEps || si.Value() == kDisambig)
       continue;
-    genFst->AddArc(midId, fst::StdArc(si->Label(), si->Label(),
+    genFst->AddArc(midId, fst::StdArc(si.Value(), si.Value(),
                                       fst::StdArc::Weight::One(), midId));
   }
   return genFst;
diff --git a/src/makefiles/default_rules.mk b/src/makefiles/default_rules.mk
index 42d4e9d12..de11a1913 100644
--- a/src/makefiles/default_rules.mk
+++ b/src/makefiles/default_rules.mk
@@ -1,6 +1,10 @@
 
 SHELL := /bin/bash
 
+ifeq ($(notdir ${CC}), emcc)
+  IS_EMSCRIPTEN = true
+endif
+
 ifeq ($(KALDI_FLAVOR), dynamic)
   ifeq ($(shell uname), Darwin)
     ifdef ANDROIDINC # cross-compiling enabled on host MacOS
@@ -26,6 +30,11 @@ ifeq ($(KALDI_FLAVOR), dynamic)
     $(error Dynamic libraries not supported on this platform. Run configure with --static flag.)
   endif
   XDEPENDS =
+else ifdef IS_EMSCRIPTEN
+  ifdef LIBNAME
+    LIBFILE = $(LIBNAME).bc
+  endif
+  XDEPENDS = $(foreach dep,$(ADDLIBS), $(dir $(dep))$(notdir $(basename $(dep))).bc)
 else
   ifdef LIBNAME
     LIBFILE = $(LIBNAME).a
@@ -33,14 +42,22 @@ else
   XDEPENDS = $(ADDLIBS)
 endif
 
+ifdef IS_EMSCRIPTEN
+all: $(LIBFILE)
+else
 all: $(LIBFILE) $(BINFILES)
-
+endif
 
 ifdef LIBNAME
 
+ifdef IS_EMSCRIPTEN
+$(LIBNAME).bc: $(OBJFILES)
+	$(CXX) -o $(LIBNAME).bc $(OBJFILES)
+else
 $(LIBNAME).a: $(OBJFILES)
 	$(AR) -cr $(LIBNAME).a $(OBJFILES)
 	$(RANLIB) $(LIBNAME).a
+endif
 
 ifeq ($(KALDI_FLAVOR), dynamic)
 # the LIBFILE is not the same as $(LIBNAME).a
@@ -78,11 +95,14 @@ endif
 %.a:
 	$(MAKE) -C ${@D} ${@F}
 
+%.bc:
+	$(MAKE) -C ${@D} ${@F}
+
 %.so:
 	$(MAKE) -C ${@D} ${@F}
 
 clean:
-	-rm -f *.o *.a *.so *.dylib $(OBJFILES) $(TESTFILES) $(BINFILES) $(TESTOUTPUTS) tmp* *.tmp *.testlog
+	-rm -f *.o *.a *.bc *.so *.dylib $(OBJFILES) $(TESTFILES) $(BINFILES) $(TESTOUTPUTS) tmp* *.tmp *.testlog
 
 distclean: clean
 	-rm -f .depend.mk
diff --git a/src/makefiles/wasm_clapack.mk b/src/makefiles/wasm_clapack.mk
new file mode 100644
index 000000000..7bd5a9f83
--- /dev/null
+++ b/src/makefiles/wasm_clapack.mk
@@ -0,0 +1,32 @@
+# WebAssembly/CLAPACK configuration
+
+ifndef DOUBLE_PRECISION
+$(error DOUBLE_PRECISION not defined.)
+endif
+ifndef OPENFSTINC
+$(error OPENFSTINC not defined.)
+endif
+ifndef OPENFSTLIBS
+$(error OPENFSTLIBS not defined.)
+endif
+
+CXXFLAGS = -std=c++11 -I.. -I$(OPENFSTINC) $(EXTRA_CXXFLAGS) \
+           -Wall -Wno-sign-compare -Wno-unused-local-typedefs \
+           -Wno-deprecated-declarations -Winit-self \
+           -DKALDI_DOUBLEPRECISION=$(DOUBLE_PRECISION) \
+           -DHAVE_CXXABI_H -DHAVE_CLAPACK -I../../tools/CLAPACK \
+           -g # -DKALDI_PARANOID
+
+ifeq ($(KALDI_FLAVOR), dynamic)
+CXXFLAGS += -fPIC
+endif
+
+# Compiler specific flags
+COMPILER = $(shell $(CXX) -v 2>&1)
+ifeq ($(findstring clang,$(COMPILER)),clang)
+# Suppress annoying clang warnings that are perfectly valid per spec.
+CXXFLAGS += -Wno-mismatched-tags
+endif
+
+LDFLAGS = $(EXTRA_LDFLAGS) $(OPENFSTLDFLAGS) -g
+LDLIBS = $(EXTRA_LDLIBS) $(OPENFSTLIBS) $(CLAPACKLIBS) -lm # -lpthread -ldl
\ No newline at end of file
diff --git a/tools/Makefile b/tools/Makefile
index bfdd4f8d8..4c4c56227 100644
--- a/tools/Makefile
+++ b/tools/Makefile
@@ -9,7 +9,7 @@ WGET ?= wget
 
 # Note: OpenFst requires a relatively recent C++ compiler with C++11 support,
 # e.g. g++ >= 4.7, Apple clang >= 5.0 or LLVM clang >= 3.3.
-OPENFST_VERSION ?= 1.7.7
+OPENFST_VERSION ?= 1.6.7
 CUB_VERSION ?= 1.8.0
 # No '?=', since there exists only one version of sph2pipe.
 SPH2PIPE_VERSION = 2.5
diff --git a/tools/extras/check_dependencies.sh b/tools/extras/check_dependencies.sh
index 155a376b6..1acc1f31c 100755
--- a/tools/extras/check_dependencies.sh
+++ b/tools/extras/check_dependencies.sh
@@ -60,7 +60,7 @@ case $compiler_ver_info in
 esac
 
 # Cannot check this without a compiler.
-if have "$CXX" && ! echo "#include <zlib.h>" | $CXX $CXXFLAGS -E - &>/dev/null; then
+if have "$CXX" && ! $CXX $CXXFLAGS -I/usr/include -E "$(dirname $0)/zlib_test.h" >&/dev/null; then
   echo "$0: zlib is not installed."
   add_packages zlib-devel zlib1g-dev
 fi
diff --git a/tools/extras/zlib_test.h b/tools/extras/zlib_test.h
new file mode 100644
index 000000000..7af470919
--- /dev/null
+++ b/tools/extras/zlib_test.h
@@ -0,0 +1 @@
+#include <zlib.h>
\ No newline at end of file
